/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate {
    tasks.register('androidJavadocs', Javadoc) {
        dependsOn 'assembleRelease'
        failOnError = false
        options.encoding = "UTF-8"
        options.charSet = 'UTF-8'
        if (project.hasProperty('android')) {
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            def mainSrcDirs = android.sourceSets.main.java.srcDirs
            if (mainSrcDirs && mainSrcDirs.size() > 0) {
                source = mainSrcDirs
            } else {
                logger.warn("No Java source dirs found for Javadoc generation.")
                source = files() // 空文件集，避免报错
            }
            android.libraryVariants.all { variant ->
                if (variant.name == 'release') {
                    if (variant.hasProperty('javaCompileProvider')) {
                        owner.classpath += variant.javaCompileProvider.get().classpath
                    }
                }
            }
        } else {
            logger.warn("Android plugin not applied, skipping Javadoc source configuration.")
            source = files()
        }
        exclude '**/R.html', '**/R.*.html', '**/index.html'
    }

    tasks.register('androidJavadocsJar', Jar) {
        dependsOn tasks.named('androidJavadocs')
        archiveClassifier.set('javadoc')
        from tasks.named('androidJavadocs').get().destinationDir
    }

    tasks.register('androidSourcesJar', Jar) {
        archiveClassifier.set('sources')
        if (project.hasProperty('android')) {
            from android.sourceSets.main.java.srcDirs
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME

                artifact(tasks.named('androidSourcesJar'))
                artifact(tasks.named('androidJavadocsJar'))
                artifact("$buildDir/outputs/aar/${project.name}-release.aar")

                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    inceptionYear = POM_INCEPTION_YEAR

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_EMAIL
                        }
                    }

                    scm {
                        connection= POM_SCM_CONNECTION
                        developerConnection=POM_SCM_DEV_CONNECTION
                        url=POM_SCM_URL
                    }

                    withXml {
                        def dependencies = asNode().appendNode("dependencies")
                        configurations.getByName("releaseCompileClasspath").resolvedConfiguration.firstLevelModuleDependencies.forEach {
                            def dependency = dependencies.appendNode("dependency")
                            dependency.appendNode("groupId", it.moduleGroup)
                            dependency.appendNode("artifactId", it.moduleName)
                            dependency.appendNode("version", it.moduleVersion)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = POM_NAME
                url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() }
        sign publishing.publications
    }
}
