import java.util.regex.Matcher

apply plugin: 'com.android.library'

def versionName() {
    String config = getProjectDir().getPath() + '/src/main/java/com/qiniu/android/common/Constants.java'
    String fileContents = new File(config).text
    Matcher myMatcher = fileContents =~ /VERSION = "(.+)";/
    String version = myMatcher[0][1]
    println(version)
    return version
}

def versionNameToCode(String version) {
    String v = version.replaceAll(/\./, '')
    return v.toLong()
}

String version = versionName()
int code = versionNameToCode(version)

android {
    namespace 'com.qiniu.android'
    compileSdk 36

    defaultConfig {
        minSdkVersion 14
        versionCode code
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '20.0.5594570'

//    useLibrary 'android.test.runner'
//    useLibrary 'android.test.base'
//    useLibrary 'android.test.mock'
}


dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.qiniu:happy-dns:2.0.1'

    // for javax.annotation.Nullable use in custom MultipartBody and Headers implements.
//    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

//    androidTestImplementation "androidx.test:runner:1.4.0"
//    androidTestImplementation "androidx.test:core:1.4.0"
//    androidTestImplementation "androidx.test:rules:1.4.0"

//    androidTestImplementation 'org.testng:testng:6.9.6'
    androidTestCompileOnly project(path: ':library')
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task releaseJar(type: Jar, dependsOn: 'build') {
    //指定生成的jar名
    archiveBaseName = ('qiniu-android-sdk-' + version + '.jar')
    //从哪里打包class文件
//    from('build/intermediates/classes/release/com/qiniu/android/dns/')
    //打包到jar后的目录结构
//    into('com/qiniu/android/dns/')
    //去掉不需要打包的目录和文件
    exclude('test/', 'BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude { it.name.startsWith('R$') }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompileProvider
    task.from variant.javaCompileProvider.get().destinationDir
    task.exclude '**/R.*', '**/R$*.*', '**/BuildConfig.class'
    artifacts.add('archives', task)
}

setProperty('VERSION_NAME', version)
setProperty('VERSION_CODE', code)

apply from: '../mvn_push.gradle'
